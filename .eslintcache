[{"/Users/sagbeyeg/Flatiron/code/mod5/traverse/traverse-frontend/src/Components/Location.js":"1","/Users/sagbeyeg/Flatiron/code/mod5/traverse/traverse-frontend/src/Components/Review.js":"2"},{"size":5160,"mtime":1610768857851,"results":"3","hashOfConfig":"4"},{"size":5058,"mtime":1610768678277,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"dstn7k",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/sagbeyeg/Flatiron/code/mod5/traverse/traverse-frontend/src/Components/Location.js",["11","12","13","14"],"/Users/sagbeyeg/Flatiron/code/mod5/traverse/traverse-frontend/src/Components/Review.js",["15","16"],"import React, { Component } from 'react';\nimport { Card, Button, Icon } from 'semantic-ui-react' \nimport {connect} from 'react-redux'\nimport { deleteReview, updateReview } from '../Redux/actions'\nimport { Planet } from 'react-planet';\nclass Review extends Component {\n  state = {\n    review: this.props.review,\n    edit: false,\n    title: this.props.review.title,\n    rating: this.props.review.rating,\n    content: this.props.review.content,\n  }\n\n  toggleEdit = () => {\n    this.setState(prevState => ({edit: !prevState.edit }), () => console.log(this.state.edit))\n    // alert(\"Please navigate to the Destination to edit your review.\")\n  }\n\n  changeHandler = (e) => {\n    this.setState({\n      ...this.state, [ e.target.name ]: e.target.value\n    }, () => console.log(this.state))\n  }\n \n  submitHandler = (e) => {\n    e.preventDefault()\n    let review = {\n      location_id: this.props.id,\n      user_id: 1,\n      title: this.state.title,\n      rating: this.state.rating,\n      content: this.state.content\n    }\n    let reviewId = this.props.review.id\n    this.props.updateReview(review, reviewId)\n    this.setState({edit: false})\n  }\n\n  deleteHandler = (e) => {\n    console.log(e.target.id)\n    let id = parseInt(e.target.id)\n    this.props.deleteReview(id)\n    // alert(\"Please navigate to the Destination to delete your review.\")\n  }\n\n  clickHandler = () => {\n    localStorage.setItem('locationId', this.props.review.location.id);\n    localStorage.setItem('locationName', this.props.review.location.name);\n  }\n\n  userClickHandler = (e) => {\n    localStorage.setItem(\"userId\", this.props.review.user.id)\n  }\n\n  render() {\n    const { review } = this.props\n    const star = \"⭐\"\n    const empty_star = \"☆\"\n    return (\n      <>\n      {this.state.edit?\n        <Card>\n          <form onSubmit={this.submitHandler}> \n            <div className=\"form-group\">\n              <label for=\"title\">Title</label>\n              <input type=\"title\" className=\"form-control\" name=\"title\" placeholder=\"Title\" value={this.state.title} onChange={(e) => this.changeHandler(e)}></input>\n            </div>\n            <div className=\"form-group\">\n              <label for=\"rating\">Rating</label>\n              <select className=\"form-control\" name=\"rating\" value={this.state.rating} onChange={(e) => this.changeHandler(e)}>\n                <option>1</option>\n                <option>2</option>\n                <option>3</option>\n                <option>4</option>\n                <option>5</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label for=\"content\">Content</label>\n              <textarea className=\"form-control\" name=\"content\" rows=\"3\" value={this.state.content} onChange={(e) => this.changeHandler(e)}></textarea>\n            </div>\n            <Button onClick={this.toggleEdit}>Cancel</Button>\n            <Button color=\"green\">Submit Update</Button>\n          </form>\n        </Card>\n      :\n        <Card >\n          <Card.Content>\n          {review.user_id == 1?\n            <Planet\n                centerContent={<Icon color=\"blue\" name=\"th list\" />}\n                hideOrbit\n                autoClose\n                orbitRadius={40}\n                bounceOnClose\n                align=\"right\"\n                rotation={105}\n                // the bounce direction is minimal visible\n                // but on close it seems the button wobbling a bit to the bottom\n                bounceDirection=\"BOTTOM\"\n            >\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <Icon name=\"trash\" color='red' size=\"large\" id={review.id} onClick={this.deleteHandler} style={{cursor: 'pointer'}}/>\n                <Icon name=\"edit\" color=\"green\" size=\"large\" id={review.id} onClick={this.toggleEdit} style={{cursor: 'pointer'}}/>\n            </Planet>\n            :\n            null\n          }\n            <Card.Header><h2>{review.title}</h2></Card.Header>\n            {star.repeat(review.rating)}{empty_star.repeat(5 - review.rating)}\n            <Card.Meta>\n              <a href=\"user\" onClick={this.userClickHandler} style={{cursor: 'pointer'}}>{review.user_id == 1?\"You\": review.user.name}</a>for <a href=\"location\" onClick={this.clickHandler}style={{cursor: 'pointer'}}><strong>{review.location.name}</strong></a> \n            </Card.Meta>\n            <Card.Description>\n              <h5>{review.content}</h5>\n            </Card.Description>\n              {/* {review.user_id == 1?\n            <>\n            <Button id={review.id} onClick={this.toggleEdit}>Edit</Button>\n            <Button color='red' id={review.id} onClick={this.deleteHandler}>Delete</Button>\n            </>\n            :\n            null\n          } */}\n          </Card.Content>\n        </Card>\n      }\n      </>\n    );\n  }\n}\n\nfunction mdp(dispatch){\n  return {deleteReview: (id) => dispatch(deleteReview(id)), updateReview: (review, reviewId) => dispatch(updateReview(review, reviewId))}\n}\n\nexport default connect(null, mdp)(Review);",{"ruleId":"17","severity":1,"message":"18","line":2,"column":47,"nodeType":"19","messageId":"20","endLine":2,"endColumn":51},{"ruleId":"21","severity":1,"message":"22","line":35,"column":87,"nodeType":"23","messageId":"24","endLine":35,"endColumn":89},{"ruleId":"21","severity":1,"message":"22","line":72,"column":43,"nodeType":"23","messageId":"24","endLine":72,"endColumn":45},{"ruleId":"21","severity":1,"message":"25","line":75,"column":43,"nodeType":"23","messageId":"24","endLine":75,"endColumn":45},{"ruleId":"21","severity":1,"message":"22","line":90,"column":27,"nodeType":"23","messageId":"24","endLine":90,"endColumn":29},{"ruleId":"21","severity":1,"message":"22","line":117,"column":106,"nodeType":"23","messageId":"24","endLine":117,"endColumn":108},"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]